const {
  Annotation,
  option: {Some, None},
  TraceId
} = require('zipkin')

const getBaseOperationObj = (instance) => {
  if (!instance.hasOwnProperty('actions')) {
    throw new Error('incorrect client library instance')
  }

// originally code gets prototype of Actions which is resources
// expecting it to be Base Operations, however we need to get
// prototype of resources to get Base operation, which actually has
// the request method
  const Actions = Object.getPrototypeOf(instance.actions)
  const Resources = Object.getPrototypeOf(Actions)
  const BaseOperation = Object.getPrototypeOf(Resources)

  if (!BaseOperation.hasOwnProperty('request')) {
    throw new Error('incorrect client library instance')
  }

  return BaseOperation
}

module.exports = (to_wrap, options) => {
  const { tracer, serviceName } = options
  const BaseOperation = getBaseOperationObj(to_wrap)

  const fnRef = BaseOperation.request

  BaseOperation.request = function (options) {
	  // options is minimal at this point
	  console.log('What is options at top of wrapper??? : ', options);

    return new Promise((resolve, reject) => {
      tracer.scoped(() => {

        tracer.setId(tracer.createChildId());
        const traceId = tracer.id;

        options.resolveWithFullResponse = true;

        // url DNE in options, not created till further down the line,
		// at this point we need to check for simply the action name varialble

        // When we are invoking another action, pass zipkin
        // trace parameters in the request body.
        if (options.actionName && options.method == 'POST') {
          options.body._zipkin = {
            traceId: traceId.traceId,
            spanId: traceId.spanId,
            parentId: traceId.parentId
          }
	  } // TODO : These are not added to the body !!! there is no body

		//console.log('Right after add zipkin properties : ', options);
        // this section is outdated, there is no url in options

		// not sure the url is necissary really
        tracer.recordServiceName(serviceName);
        tracer.recordRpc(options.method);
        //tracer.recordBinary('http.url', options.url); // TODO : NEED TO PUT CORRECT URL HERE
        tracer.recordAnnotation(new Annotation.ClientSend());

        fnRef.apply(BaseOperation, arguments).then(result => {
          tracer.scoped(() => {
            tracer.setId(traceId);
            tracer.recordBinary('http.status_code', result.statusCode.toString());
            tracer.recordAnnotation(new Annotation.ClientRecv());
          });
          resolve(result.body)
	  }).catch(err => { // NOTE : this catch may also be outdated as HTTP error codes are dealt with in OW client object
          tracer.scoped(() => {
            tracer.setId(traceId);
            tracer.recordBinary('request.error', err.toString());
            tracer.recordAnnotation(new Annotation.ClientRecv());
          });
          reject(err);
        })
      })
    })
  }

  return to_wrap
}
