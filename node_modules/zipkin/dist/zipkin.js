(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (factory());
}(this, (function () { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var None = {
    get type() {
      return 'None';
    },

    get present() {
      return false;
    },

    map: function map() {
      return this;
    },
    ifPresent: function ifPresent() {},
    flatMap: function flatMap() {
      return this;
    },
    getOrElse: function getOrElse(f) {
      return f instanceof Function ? f() : f;
    },
    equals: function equals(other) {
      return other === this;
    },
    toString: function toString() {
      return 'None';
    }
  };

  var Some =
  /*#__PURE__*/
  function () {
    function Some(value) {
      _classCallCheck(this, Some);

      this.value = value;
    }

    _createClass(Some, [{
      key: "map",
      value: function map(f) {
        return new Some(f(this.value));
      }
    }, {
      key: "ifPresent",
      value: function ifPresent(f) {
        f(this.value);
      }
    }, {
      key: "flatMap",
      value: function flatMap(f) {
        return f(this.value);
      }
    }, {
      key: "getOrElse",
      value: function getOrElse() {
        return this.value;
      }
    }, {
      key: "equals",
      value: function equals(other) {
        return other instanceof Some && other.value === this.value;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "Some(".concat(this.value, ")");
      }
    }, {
      key: "type",
      get: function get() {
        return 'Some';
      }
    }, {
      key: "present",
      get: function get() {
        return true;
      }
    }]);

    return Some;
  }(); // Used to validate input arguments


  function isOptional(data) {
    return data instanceof Some || None.equals(data);
  }

  function verifyIsOptional(data) {
    if (data == null) {
      throw new Error('Error: data is not Optional - it\'s null');
    }

    if (isOptional(data)) {
      if (isOptional(data.value)) {
        throw new Error("Error: data (".concat(data.value, ") is wrapped in Option twice"));
      }
    } else {
      throw new Error("Error: data (".concat(data, ") is not an Option!"));
    }
  }

  function verifyIsNotOptional(data) {
    if (isOptional(data)) {
      throw new Error("Error: data (".concat(data, ") is an Option!"));
    }
  }

  function fromNullable(nullable) {
    return nullable == null ? None : new Some(nullable);
  }

  var Some_1 = Some;
  var None_1 = None;
  var isOptional_1 = isOptional;
  var verifyIsOptional_1 = verifyIsOptional;
  var verifyIsNotOptional_1 = verifyIsNotOptional;
  var fromNullable_1 = fromNullable;
  var option = {
    Some: Some_1,
    None: None_1,
    isOptional: isOptional_1,
    verifyIsOptional: verifyIsOptional_1,
    verifyIsNotOptional: verifyIsNotOptional_1,
    fromNullable: fromNullable_1
  };

  /*
  The MIT License (MIT)

  Copyright (c) 2016 CoderPuppy

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  */
  var _endianness;

  function endianness() {
    if (typeof _endianness === 'undefined') {
      var a = new ArrayBuffer(2);
      var b = new Uint8Array(a);
      var c = new Uint16Array(a);
      b[0] = 1;
      b[1] = 2;

      if (c[0] === 258) {
        _endianness = 'BE';
      } else if (c[0] === 513) {
        _endianness = 'LE';
      } else {
        throw new Error('unable to figure out endianess');
      }
    }

    return _endianness;
  }
  function hostname() {
    if (typeof global.location !== 'undefined') {
      return global.location.hostname;
    } else return '';
  }
  function loadavg() {
    return [];
  }
  function uptime() {
    return 0;
  }
  function freemem() {
    return Number.MAX_VALUE;
  }
  function totalmem() {
    return Number.MAX_VALUE;
  }
  function cpus() {
    return [];
  }
  function type() {
    return 'Browser';
  }
  function release() {
    if (typeof global.navigator !== 'undefined') {
      return global.navigator.appVersion;
    }

    return '';
  }
  function networkInterfaces() {}
  function getNetworkInterfaces() {}
  function tmpDir() {
    return '/tmp';
  }
  var tmpdir = tmpDir;
  var EOL = '\n';
  var os = {
    EOL: EOL,
    tmpdir: tmpdir,
    tmpDir: tmpDir,
    networkInterfaces: networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    release: release,
    type: type,
    cpus: cpus,
    totalmem: totalmem,
    freemem: freemem,
    uptime: uptime,
    loadavg: loadavg,
    hostname: hostname,
    endianness: endianness
  };

  function pickInterface(interfaces, family) {
    /*eslint-disable */
    for (var i in interfaces) {
      /*eslint-enable */
      for (var j = interfaces[i].length - 1; j >= 0; j--) {
        var face = interfaces[i][j];
        var reachable = family === 'IPv4' || face.scopeid === 0;
        if (!face.internal && face.family === family && reachable) return face.address;
      }
    }

    return family === 'IPv4' ? '127.0.0.1' : '::1';
  }

  function reduceInterfaces(interfaces, iface) {
    var ifaces = {};
    /*eslint-disable */

    for (var i in interfaces) {
      /*eslint-enable */
      if (i === iface) ifaces[i] = interfaces[i];
    }

    return ifaces;
  }

  function ipv4(iface) {
    var interfaces = os.networkInterfaces();
    if (iface) interfaces = reduceInterfaces(interfaces, iface);
    return pickInterface(interfaces, 'IPv4');
  }

  function ipv6(iface) {
    var interfaces = os.networkInterfaces();
    if (iface) interfaces = reduceInterfaces(interfaces, iface);
    return pickInterface(interfaces, 'IPv6');
  }

  ipv4.ipv4 = ipv4;
  ipv4.ipv6 = ipv6;
  var network = ipv4;

  var InetAddress =
  /*#__PURE__*/
  function () {
    function InetAddress(addr) {
      _classCallCheck(this, InetAddress);

      this.addr = addr;
    } // returns undefined if this isn't an IPv4 string


    _createClass(InetAddress, [{
      key: "ipv4",
      value: function ipv4() {
        // coercing to int forces validation here
        var ipv4Int = this.toInt();

        if (ipv4Int && ipv4Int !== 0) {
          return this.addr;
        }

        return undefined;
      }
    }, {
      key: "toInt",
      value: function toInt() {
        // e.g. 10.57.50.83
        // should become
        // 171520595
        var parts = this.addr.split('.'); // The jshint tool always complains about using bitwise operators,
        // but in this case it's actually intentional, so we disable the warning:
        // jshint bitwise: false

        return parts[0] << 24 | parts[1] << 16 | parts[2] << 8 | parts[3];
      }
    }, {
      key: "toString",
      value: function toString() {
        return "InetAddress(".concat(this.addr, ")");
      }
    }]);

    return InetAddress;
  }(); // In non-node environments we fallback to 127.0.0.1


  InetAddress.getLocalAddress = function getLocalAddress() {
    var isNode = (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && typeof process.on === 'function';

    if (!isNode) {
      return new InetAddress('127.0.0.1');
    } // eslint-disable-next-line global-require


    var networkAddress = network;
    return new InetAddress(networkAddress.ipv4());
  };

  var InetAddress_1 = InetAddress;

  var SimpleAnnotation =
  /*#__PURE__*/
  function () {
    function SimpleAnnotation() {
      _classCallCheck(this, SimpleAnnotation);
    }

    _createClass(SimpleAnnotation, [{
      key: "toString",
      value: function toString() {
        return "".concat(this.annotationType, "()");
      }
    }]);

    return SimpleAnnotation;
  }();

  var ClientSend =
  /*#__PURE__*/
  function (_SimpleAnnotation) {
    _inherits(ClientSend, _SimpleAnnotation);

    function ClientSend() {
      _classCallCheck(this, ClientSend);

      return _possibleConstructorReturn(this, _getPrototypeOf(ClientSend).apply(this, arguments));
    }

    return ClientSend;
  }(SimpleAnnotation);

  var ClientRecv =
  /*#__PURE__*/
  function (_SimpleAnnotation2) {
    _inherits(ClientRecv, _SimpleAnnotation2);

    function ClientRecv() {
      _classCallCheck(this, ClientRecv);

      return _possibleConstructorReturn(this, _getPrototypeOf(ClientRecv).apply(this, arguments));
    }

    return ClientRecv;
  }(SimpleAnnotation);

  var ServerSend =
  /*#__PURE__*/
  function (_SimpleAnnotation3) {
    _inherits(ServerSend, _SimpleAnnotation3);

    function ServerSend() {
      _classCallCheck(this, ServerSend);

      return _possibleConstructorReturn(this, _getPrototypeOf(ServerSend).apply(this, arguments));
    }

    return ServerSend;
  }(SimpleAnnotation);

  var ServerRecv =
  /*#__PURE__*/
  function (_SimpleAnnotation4) {
    _inherits(ServerRecv, _SimpleAnnotation4);

    function ServerRecv() {
      _classCallCheck(this, ServerRecv);

      return _possibleConstructorReturn(this, _getPrototypeOf(ServerRecv).apply(this, arguments));
    }

    return ServerRecv;
  }(SimpleAnnotation);

  var ProducerStart =
  /*#__PURE__*/
  function (_SimpleAnnotation5) {
    _inherits(ProducerStart, _SimpleAnnotation5);

    function ProducerStart() {
      _classCallCheck(this, ProducerStart);

      return _possibleConstructorReturn(this, _getPrototypeOf(ProducerStart).apply(this, arguments));
    }

    return ProducerStart;
  }(SimpleAnnotation);

  var ProducerStop =
  /*#__PURE__*/
  function (_SimpleAnnotation6) {
    _inherits(ProducerStop, _SimpleAnnotation6);

    function ProducerStop() {
      _classCallCheck(this, ProducerStop);

      return _possibleConstructorReturn(this, _getPrototypeOf(ProducerStop).apply(this, arguments));
    }

    return ProducerStop;
  }(SimpleAnnotation);

  var ConsumerStart =
  /*#__PURE__*/
  function (_SimpleAnnotation7) {
    _inherits(ConsumerStart, _SimpleAnnotation7);

    function ConsumerStart() {
      _classCallCheck(this, ConsumerStart);

      return _possibleConstructorReturn(this, _getPrototypeOf(ConsumerStart).apply(this, arguments));
    }

    return ConsumerStart;
  }(SimpleAnnotation);

  var ConsumerStop =
  /*#__PURE__*/
  function (_SimpleAnnotation8) {
    _inherits(ConsumerStop, _SimpleAnnotation8);

    function ConsumerStop() {
      _classCallCheck(this, ConsumerStop);

      return _possibleConstructorReturn(this, _getPrototypeOf(ConsumerStop).apply(this, arguments));
    }

    return ConsumerStop;
  }(SimpleAnnotation);

  function LocalOperationStart(name) {
    this.name = name;
  }

  LocalOperationStart.prototype.toString = function () {
    return "LocalOperationStart(\"".concat(this.name, "\")");
  };

  var LocalOperationStop =
  /*#__PURE__*/
  function (_SimpleAnnotation9) {
    _inherits(LocalOperationStop, _SimpleAnnotation9);

    function LocalOperationStop() {
      _classCallCheck(this, LocalOperationStop);

      return _possibleConstructorReturn(this, _getPrototypeOf(LocalOperationStop).apply(this, arguments));
    }

    return LocalOperationStop;
  }(SimpleAnnotation);

  function Message(message) {
    this.message = message;
  }

  Message.prototype.toString = function () {
    return "Message(\"".concat(this.message, "\")");
  };

  function ServiceName(serviceName) {
    this.serviceName = serviceName;
  }

  ServiceName.prototype.toString = function () {
    return "ServiceName(\"".concat(this.serviceName, "\")");
  };

  function Rpc(name) {
    this.name = name;
  }

  Rpc.prototype.toString = function () {
    return "Rpc(\"".concat(this.name, "\")");
  };

  function ClientAddr(_ref) {
    var host = _ref.host,
        port = _ref.port;
    this.host = host;
    this.port = port;
  }

  ClientAddr.prototype.toString = function () {
    return "ClientAddr(host=\"".concat(this.host, "\", port=").concat(this.port, ")");
  };

  function ServerAddr(_ref2) {
    var serviceName = _ref2.serviceName,
        host = _ref2.host,
        port = _ref2.port;
    this.serviceName = serviceName;
    this.host = host || undefined;
    this.port = port || 0;
  }

  ServerAddr.prototype.toString = function () {
    return "ServerAddr(serviceName=\"".concat(this.serviceName, "\", host=\"").concat(this.host, "\", port=").concat(this.port, ")");
  };

  function LocalAddr(_ref3) {
    var host = _ref3.host,
        port = _ref3.port;
    this.host = host || InetAddress_1.getLocalAddress();
    this.port = port || 0;
  }

  LocalAddr.prototype.toString = function () {
    return "LocalAddr(host=\"".concat(this.host.toString(), "\", port=").concat(this.port, ")");
  };

  function MessageAddr(_ref4) {
    var serviceName = _ref4.serviceName,
        host = _ref4.host,
        port = _ref4.port;
    this.serviceName = serviceName;
    this.host = host;
    this.port = port;
  }

  MessageAddr.prototype.toString = function () {
    return "MessageAddr(serviceName=\"".concat(this.serviceName, "\", host=\"").concat(this.host, "\", port=").concat(this.port, ")");
  };

  function BinaryAnnotation(key, value) {
    this.key = key;
    this.value = value;
  }

  BinaryAnnotation.prototype.toString = function () {
    return "BinaryAnnotation(".concat(this.key, "=\"").concat(this.value, "\")");
  };

  var annotation = {
    ClientSend: ClientSend,
    ClientRecv: ClientRecv,
    ServerSend: ServerSend,
    ServerRecv: ServerRecv,
    ProducerStart: ProducerStart,
    ProducerStop: ProducerStop,
    ConsumerStart: ConsumerStart,
    ConsumerStop: ConsumerStop,
    MessageAddr: MessageAddr,
    Message: Message,
    ServiceName: ServiceName,
    Rpc: Rpc,
    ClientAddr: ClientAddr,
    ServerAddr: ServerAddr,
    LocalAddr: LocalAddr,
    BinaryAnnotation: BinaryAnnotation,
    LocalOperationStart: LocalOperationStart,
    LocalOperationStop: LocalOperationStop
  };
  Object.keys(annotation).forEach(function (key) {
    annotation[key].prototype.annotationType = key;
  });
  var annotation_1 = annotation;

  var Some$1 = option.Some; // Determines whether or not a traceId should be sampled.
  // If no sample decision is already made (by a debug flag, or
  // the "sampled" property is set), it will use evaluator,
  // which is a function traceId => Boolean, and returns true if
  // the traceId should be sampled (stored in Zipkin).

  var Sampler =
  /*#__PURE__*/
  function () {
    function Sampler(evaluator) {
      _classCallCheck(this, Sampler);

      this.evaluator = evaluator;
    }

    _createClass(Sampler, [{
      key: "shouldSample",
      value: function shouldSample(traceId) {
        var _this = this;

        var result = traceId.sampled.getOrElse(function () {
          return _this.evaluator(traceId);
        });
        return new Some$1(result);
      }
    }, {
      key: "toString",
      value: function toString() {
        return "Sampler(".concat(this.evaluator.toString(), ")");
      }
    }]);

    return Sampler;
  }();

  function neverSample(traceId) {
    // eslint-disable-line no-unused-vars
    return false;
  }

  neverSample.toString = function () {
    return 'never sample';
  };

  function alwaysSample(traceId) {
    // eslint-disable-line no-unused-vars
    return true;
  }

  alwaysSample.toString = function () {
    return 'always sample';
  };

  function makeCountingEvaluator(sampleRate) {
    if (sampleRate <= 0) {
      return neverSample;
    } else if (sampleRate >= 1) {
      return alwaysSample;
    } else {
      var counter = 0;
      var limit = parseInt(1 / sampleRate);

      var counting = function counting(traceId) {
        // eslint-disable-line no-unused-vars
        counter = counter % limit;
        var shouldSample = counter === 0;
        counter++;
        return shouldSample;
      };

      counting.toString = function () {
        return "countingSampler: sampleRate=".concat(sampleRate);
      };

      return counting;
    }
  }

  var CountingSampler =
  /*#__PURE__*/
  function (_Sampler) {
    _inherits(CountingSampler, _Sampler);

    function CountingSampler() {
      var sampleRate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      _classCallCheck(this, CountingSampler);

      return _possibleConstructorReturn(this, _getPrototypeOf(CountingSampler).call(this, makeCountingEvaluator(sampleRate < 1 ? sampleRate : 1)));
    }

    return CountingSampler;
  }(Sampler);

  var sampler = {
    Sampler: Sampler,
    CountingSampler: CountingSampler,
    neverSample: neverSample,
    alwaysSample: alwaysSample
  };

  var Record =
  /*#__PURE__*/
  function () {
    function Record(_ref) {
      var traceId = _ref.traceId,
          timestamp = _ref.timestamp,
          annotation = _ref.annotation;

      _classCallCheck(this, Record);

      this.traceId = traceId;
      this.timestamp = timestamp;
      this.annotation = annotation;
    }

    _createClass(Record, [{
      key: "toString",
      value: function toString() {
        return "Record(traceId=".concat(this.traceId.toString(), ", annotation=").concat(this.annotation.toString(), ")");
      }
    }]);

    return Record;
  }();

  var record = Record;

  var Some$2 = option.Some,
      None$1 = option.None,
      verifyIsOptional$1 = option.verifyIsOptional,
      verifyIsNotOptional$1 = option.verifyIsNotOptional;

  var TraceId =
  /*#__PURE__*/
  function () {
    function TraceId(params) {
      _classCallCheck(this, TraceId);

      var _params$traceId = params.traceId,
          traceId = _params$traceId === void 0 ? None$1 : _params$traceId,
          _params$parentId = params.parentId,
          parentId = _params$parentId === void 0 ? None$1 : _params$parentId,
          spanId = params.spanId,
          _params$sampled = params.sampled,
          sampled = _params$sampled === void 0 ? None$1 : _params$sampled,
          _params$flags = params.flags,
          flags = _params$flags === void 0 ? 0 : _params$flags;
      verifyIsOptional$1(traceId);
      verifyIsOptional$1(parentId);
      verifyIsNotOptional$1(spanId);
      verifyIsOptional$1(sampled);
      this._traceId = traceId;
      this._parentId = parentId;
      this._spanId = spanId;
      this._sampled = sampled;
      this._flags = flags;
    }

    _createClass(TraceId, [{
      key: "isDebug",
      value: function isDebug() {
        // The jshint tool always complains about using bitwise operators,
        // but in this case it's actually intentional, so we disable the warning:
        // jshint bitwise: false
        return (this._flags & 1) === 1;
      }
    }, {
      key: "toString",
      value: function toString() {
        return "TraceId(spanId=".concat(this.spanId.toString()) + ", parentId=".concat(this.parentId.toString()) + ", traceId=".concat(this.traceId.toString(), ")");
      }
    }, {
      key: "spanId",
      get: function get() {
        return this._spanId;
      }
    }, {
      key: "parentId",
      get: function get() {
        return this._parentId.getOrElse(this.spanId);
      }
    }, {
      key: "traceId",
      get: function get() {
        return this._traceId.getOrElse(this.parentId);
      }
    }, {
      key: "sampled",
      get: function get() {
        return this.isDebug() ? new Some$2(true) : this._sampled;
      }
    }, {
      key: "flags",
      get: function get() {
        return this._flags;
      }
    }]);

    return TraceId;
  }();

  var TraceId_1 = TraceId;

  // === Generate a random 64-bit number in fixed-length hex format
  function randomTraceId() {
    var digits = '0123456789abcdef';
    var n = '';

    for (var i = 0; i < 16; i++) {
      var rand = Math.floor(Math.random() * 16);
      n += digits[rand];
    }

    return n;
  }

  var randomTraceId_1 = randomTraceId;

  var hrTimeSupport = typeof process !== 'undefined' && process.hrtime; // since hrtime isn't available, we can ignore the input parameters

  function nowLegacy() {
    return Date.now() * 1000;
  }

  function nowHrTime(startTimestamp, startTick) {
    if (startTimestamp && startTick) {
      var _hrtime = process.hrtime(startTick);

      var elapsedMicros = Math.floor(_hrtime[0] * 1000000 + _hrtime[1] / 1000);
      return startTimestamp + elapsedMicros;
    } else {
      return Date.now() * 1000;
    }
  } // Returns the current time in epoch microseconds
  // if startTimestamp and startTick are present, process.hrtime is used
  // See https://nodejs.org/api/process.html#process_process_hrtime_time


  var now = hrTimeSupport ? nowHrTime : nowLegacy;
  var hrtime = hrTimeSupport ? function () {
    return process.hrtime();
  } : function () {
    return undefined;
  };
  var time = {
    now: now,
    hrtime: hrtime
  };

  function Endpoint(_ref) {
    var serviceName = _ref.serviceName,
        ipv4 = _ref.ipv4,
        port = _ref.port;
    this.setServiceName(serviceName);
    this.setIpv4(ipv4);
    this.setPort(port);
  }

  Endpoint.prototype.setServiceName = function setServiceName(serviceName) {
    // In zipkin, names are lowercase. This eagerly converts to alert users early.
    this.serviceName = serviceName ? serviceName.toLocaleLowerCase() : undefined;
  };

  Endpoint.prototype.setIpv4 = function setIpv4(ipv4) {
    this.ipv4 = ipv4;
  };

  Endpoint.prototype.setPort = function setPort(port) {
    this.port = port || undefined;
  };

  Endpoint.prototype.isEmpty = function isEmpty() {
    return this.serviceName === undefined && this.ipv4 === undefined && this.port === undefined;
  };

  function Annotation(timestamp, value) {
    this.timestamp = timestamp;
    this.value = value.toString();
  }

  Annotation.prototype.toString = function toString() {
    return "Annotation(value=\"".concat(this.value, "\")");
  };

  function Span(traceId) {
    var _this = this;

    this.traceId = traceId.traceId;

    traceId._parentId.ifPresent(function (id) {
      _this.parentId = id;
    });

    this.id = traceId.spanId;
    this.name = undefined; // no default

    this.kind = undefined; // no default

    this.timestamp = undefined;
    this.duration = undefined;
    this.localEndpoint = undefined; // no default

    this.remoteEndpoint = undefined; // no default

    this.annotations = [];
    this.tags = {};
    this.debug = traceId.isDebug();
    this.shared = false;
  }

  Span.prototype.setName = function setName(name) {
    // In zipkin, names are lowercase. This eagerly converts to alert users early.
    this.name = name ? name.toLocaleLowerCase() : undefined;
  };

  Span.prototype.setKind = function setKind(kind) {
    this.kind = kind;
  };

  Span.prototype.setTimestamp = function setTimestamp(timestamp) {
    this.timestamp = timestamp;
  };

  Span.prototype.setDuration = function setDuration(duration) {
    // Due to rounding errors, a fraction ends up as zero, so check undefined
    if (typeof duration !== 'undefined') {
      this.duration = Math.max(duration, 1);
    }
  };

  Span.prototype.setLocalEndpoint = function setLocalEndpoint(ep) {
    if (ep && !ep.isEmpty()) {
      this.localEndpoint = ep;
    } else {
      this.localEndpoint = undefined;
    }
  };

  Span.prototype.setRemoteEndpoint = function setRemoteEndpoint(ep) {
    if (ep && !ep.isEmpty()) {
      this.remoteEndpoint = ep;
    } else {
      this.remoteEndpoint = undefined;
    }
  };

  Span.prototype.addAnnotation = function addAnnotation(timestamp, value) {
    this.annotations.push(new Annotation(timestamp, value));
  };

  Span.prototype.putTag = function putTag(key, value) {
    this.tags[key] = value.toString();
  };

  Span.prototype.setDebug = function setDebug(debug) {
    this.debug = debug;
  };

  Span.prototype.setShared = function setShared(shared) {
    this.shared = shared;
  };

  Span.prototype.toString = function toString() {
    var annotations = this.annotations.map(function (a) {
      return a.toString();
    }).join(', ');
    return "Span(id=".concat(this.traceId, ", annotations=[").concat(annotations, "])");
  };

  var Endpoint_1 = Endpoint;
  var Span_1 = Span;
  var model = {
    Endpoint: Endpoint_1,
    Span: Span_1
  };

  var isPromise_1 = isPromise;

  function isPromise(obj) {
    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
  }

  var None$2 = option.None,
      Some$3 = option.Some,
      fromNullable$1 = option.fromNullable;
  var Sampler$1 = sampler.Sampler,
      alwaysSample$1 = sampler.alwaysSample;
  var now$1 = time.now,
      hrtime$1 = time.hrtime;
  var Endpoint$1 = model.Endpoint;

  function requiredArg(name) {
    throw new Error("Tracer: Missing required argument ".concat(name, "."));
  }

  var Tracer =
  /*#__PURE__*/
  function () {
    function Tracer(_ref) {
      var _ref$ctxImpl = _ref.ctxImpl,
          ctxImpl = _ref$ctxImpl === void 0 ? requiredArg('ctxImpl') : _ref$ctxImpl,
          _ref$recorder = _ref.recorder,
          recorder = _ref$recorder === void 0 ? requiredArg('recorder') : _ref$recorder,
          _ref$sampler = _ref.sampler,
          sampler$$1 = _ref$sampler === void 0 ? new Sampler$1(alwaysSample$1) : _ref$sampler,
          _ref$traceId128Bit = _ref.traceId128Bit,
          traceId128Bit = _ref$traceId128Bit === void 0 ? false : _ref$traceId128Bit,
          _ref$supportsJoin = _ref.supportsJoin,
          supportsJoin = _ref$supportsJoin === void 0 ? true : _ref$supportsJoin,
          localServiceName = _ref.localServiceName,
          localEndpoint = _ref.localEndpoint,
          _ref$log = _ref.log,
          log = _ref$log === void 0 ? console : _ref$log,
          defaultTags = _ref.defaultTags;

      _classCallCheck(this, Tracer);

      this.log = log;
      this.recorder = recorder;
      this.sampler = sampler$$1;
      this.traceId128Bit = traceId128Bit;
      this.supportsJoin = supportsJoin;

      if (localEndpoint) {
        this._localEndpoint = localEndpoint;
      } else {
        this._localEndpoint = new Endpoint$1({
          serviceName: localServiceName || 'unknown'
        });
      }

      this._ctxImpl = ctxImpl;
      this._defaultTraceId = this.createRootId();
      this._startTimestamp = now$1();
      this._startTick = hrtime$1();

      if (defaultTags) {
        this.setTags(defaultTags);
      }
    }

    _createClass(Tracer, [{
      key: "scoped",
      value: function scoped(callback) {
        return this._ctxImpl.scoped(callback);
      }
    }, {
      key: "letId",
      value: function letId(id, callback) {
        return this._ctxImpl.letContext(id, callback);
      }
    }, {
      key: "createRootId",
      value: function createRootId() {
        var isSampled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : None$2;
        var isDebug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var rootSpanId = randomTraceId_1();
        var traceId = this.traceId128Bit ? new Some$3(randomTraceId_1() + rootSpanId) : None$2;
        var id = new TraceId_1({
          traceId: traceId,
          parentId: None$2,
          spanId: rootSpanId,
          sampled: isSampled,
          flags: isDebug ? 1 : 0
        });

        if (isSampled === None$2) {
          id._sampled = this.sampler.shouldSample(id);
        }

        return id;
      }
    }, {
      key: "createChildId",
      value: function createChildId() {
        var currentId = fromNullable$1(this._ctxImpl.getContext());
        var childId = new TraceId_1({
          traceId: currentId.map(function (id) {
            return id.traceId;
          }),
          parentId: currentId.map(function (id) {
            return id.spanId;
          }),
          spanId: randomTraceId_1(),
          sampled: currentId.flatMap(function (id) {
            return id.sampled;
          }),
          flags: currentId.map(function (id) {
            return id.flags;
          }).getOrElse(0)
        });

        if (childId.sampled.present === false) {
          childId._sampled = this.sampler.shouldSample(childId);
        }

        return childId;
      } // creates a span, timing the given callable, adding any error as a tag
      // if the callable returns a promise, a span stops after the promise resolves

    }, {
      key: "local",
      value: function local(operationName, callable) {
        var _this = this;

        if (typeof callable !== 'function') {
          throw new Error('you must pass a function');
        }

        return this.scoped(function () {
          var traceId = _this.createChildId();

          _this.setId(traceId);

          _this.recordServiceName(_this._localEndpoint.serviceName);

          _this.recordAnnotation(new annotation_1.LocalOperationStart(operationName));

          var result;

          try {
            result = callable();
          } catch (err) {
            _this.recordBinary('error', err.message ? err.message : err.toString());

            _this.recordAnnotation(new annotation_1.LocalOperationStop());

            throw err;
          } // Finish the span on a synchronous success


          if (!isPromise_1(result)) {
            _this.recordAnnotation(new annotation_1.LocalOperationStop());

            return result;
          }

          if (!traceId.sampled.getOrElse(false)) {
            return result; // no need to stop as it was never started
          } // At this point we know we are sampled. Explicitly record against the ID


          var explicitRecord = function explicitRecord(annotation) {
            return _this.recorder.record(new record({
              traceId: traceId,
              timestamp: now$1(_this._startTimestamp, _this._startTick),
              annotation: annotation
            }));
          }; // Ensure the span representing the promise completes


          return result.then(function (output) {
            explicitRecord(new annotation_1.LocalOperationStop());
            return output;
          }).catch(function (err) {
            var message = err.message ? err.message : err.toString();
            explicitRecord(new annotation_1.BinaryAnnotation('error', message));
            explicitRecord(new annotation_1.LocalOperationStop());
            throw err;
          });
        });
      }
    }, {
      key: "setId",
      value: function setId(traceId) {
        this._ctxImpl.setContext(traceId);
      }
    }, {
      key: "recordAnnotation",
      value: function recordAnnotation(annotation) {
        var _this2 = this;

        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : now$1(this._startTimestamp, this._startTick);
        this.id.sampled.ifPresent(function (sampled) {
          if (!sampled) return;

          _this2.recorder.record(new record({
            traceId: _this2.id,
            timestamp: timestamp,
            annotation: annotation
          }));
        });
      }
    }, {
      key: "recordMessage",
      value: function recordMessage(message) {
        this.recordAnnotation(new annotation_1.Message(message));
      }
    }, {
      key: "recordServiceName",
      value: function recordServiceName(serviceName) {
        this.recordAnnotation(new annotation_1.ServiceName(serviceName));
      }
    }, {
      key: "recordRpc",
      value: function recordRpc(name) {
        this.recordAnnotation(new annotation_1.Rpc(name));
      }
    }, {
      key: "recordClientAddr",
      value: function recordClientAddr(ia) {
        this.recordAnnotation(new annotation_1.ClientAddr(ia));
      }
    }, {
      key: "recordServerAddr",
      value: function recordServerAddr(ia) {
        this.recordAnnotation(new annotation_1.ServerAddr(ia));
      }
    }, {
      key: "recordLocalAddr",
      value: function recordLocalAddr(ia) {
        this.recordAnnotation(new annotation_1.LocalAddr(ia));
      }
    }, {
      key: "recordBinary",
      value: function recordBinary(key, value) {
        this.recordAnnotation(new annotation_1.BinaryAnnotation(key, value));
      }
    }, {
      key: "writeIdToConsole",
      value: function writeIdToConsole(message) {
        this.log.info("".concat(message, ": ").concat(this.id.toString()));
      }
    }, {
      key: "setTags",
      value: function setTags() {
        var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        // eslint-disable-next-line no-restricted-syntax
        for (var tag in tags) {
          if (tags.hasOwnProperty(tag)) {
            this.recordBinary(tag, tags[tag]);
          }
        }
      }
    }, {
      key: "id",
      get: function get() {
        return this._ctxImpl.getContext() || this._defaultTraceId;
      }
    }, {
      key: "localEndpoint",
      get: function get() {
        return this._localEndpoint;
      }
    }]);

    return Tracer;
  }();

  var tracer = Tracer;

  var explicitContext =
  /*#__PURE__*/
  function () {
    function ExplicitContext() {
      _classCallCheck(this, ExplicitContext);

      this.currentCtx = null;
    }

    _createClass(ExplicitContext, [{
      key: "setContext",
      value: function setContext(ctx) {
        this.currentCtx = ctx;
      }
    }, {
      key: "getContext",
      value: function getContext() {
        return this.currentCtx;
      }
    }, {
      key: "scoped",
      value: function scoped(callable) {
        var prevCtx = this.currentCtx;
        var result = callable();
        this.currentCtx = prevCtx;
        return result;
      }
    }, {
      key: "letContext",
      value: function letContext(ctx, callable) {
        var _this = this;

        return this.scoped(function () {
          _this.setContext(ctx);

          return callable();
        });
      }
    }]);

    return ExplicitContext;
  }();

  var noop = function createNoopTracer() {
    var recorder = {
      record: function record() {}
    };
    var ctxImpl = new explicitContext();
    return new tracer({
      recorder: recorder,
      ctxImpl: ctxImpl
    });
  };

  var httpHeaders = {
    TraceId: 'X-B3-TraceId',
    SpanId: 'X-B3-SpanId',
    ParentSpanId: 'X-B3-ParentSpanId',
    Sampled: 'X-B3-Sampled',
    Flags: 'X-B3-Flags'
  };

  var now$2 = time.now,
      hrtime$2 = time.hrtime;
  var Span$1 = model.Span,
      Endpoint$2 = model.Endpoint;

  function PartialSpan(traceId) {
    this.traceId = traceId;
    this.startTimestamp = now$2();
    this.startTick = hrtime$2();
    this.delegate = new Span$1(traceId);
    this.localEndpoint = new Endpoint$2({});
  }

  PartialSpan.prototype.finish = function finish() {
    if (this.endTimestamp) {
      return;
    }

    this.endTimestamp = now$2(this.startTimestamp, this.startTick);
  };

  var BatchRecorder =
  /*#__PURE__*/
  function () {
    function BatchRecorder(_ref) {
      var _this = this;

      var logger = _ref.logger,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === void 0 ? 60 * 1000000 : _ref$timeout;

      _classCallCheck(this, BatchRecorder);

      this.logger = logger;
      this.timeout = timeout;
      this.partialSpans = new Map(); // read through the partials spans regularly
      // and collect any timed-out ones

      var timer = setInterval(function () {
        _this.partialSpans.forEach(function (span, id) {
          if (_this._timedOut(span)) {
            _this._writeSpan(id);
          }
        });
      }, 1000);

      if (timer.unref) {
        // unref might not be available in browsers
        timer.unref(); // Allows Node to terminate instead of blocking on timer
      }
    }

    _createClass(BatchRecorder, [{
      key: "_writeSpan",
      value: function _writeSpan(id) {
        var span = this.partialSpans.get(id); // TODO(adriancole) refactor so this responsibility isn't in writeSpan

        if (span === undefined) {
          // Span not found.  Could have been expired.
          return;
        } // ready for garbage collection


        this.partialSpans.delete(id);
        var spanToWrite = span.delegate;
        spanToWrite.setLocalEndpoint(span.localEndpoint);

        if (span.endTimestamp) {
          spanToWrite.setTimestamp(span.startTimestamp);
          spanToWrite.setDuration(span.endTimestamp - span.startTimestamp);
        }

        this.logger.logSpan(spanToWrite);
      }
    }, {
      key: "_updateSpanMap",
      value: function _updateSpanMap(id, updater) {
        var span;

        if (this.partialSpans.has(id)) {
          span = this.partialSpans.get(id);
        } else {
          span = new PartialSpan(id);
        }

        updater(span);

        if (span.endTimestamp) {
          this._writeSpan(id);
        } else {
          this.partialSpans.set(id, span);
        }
      }
    }, {
      key: "_timedOut",
      value: function _timedOut(span) {
        return span.startTimestamp + this.timeout < now$2();
      }
    }, {
      key: "record",
      value: function record(rec) {
        var id = rec.traceId;

        this._updateSpanMap(id, function (span) {
          switch (rec.annotation.annotationType) {
            case 'ClientSend':
              span.delegate.setKind('CLIENT');
              break;

            case 'ClientRecv':
              span.finish();
              span.delegate.setKind('CLIENT');
              break;

            case 'ServerSend':
              span.finish();
              span.delegate.setKind('SERVER');
              break;

            case 'ServerRecv':
              // TODO: only set this to false when we know we in an existing trace
              span.delegate.setShared(id.parentId !== id.spanId);
              span.delegate.setKind('CLIENT');
              break;

            case 'ProducerStart':
              span.delegate.setKind('PRODUCER');
              break;

            case 'ProducerStop':
              span.finish();
              span.delegate.setKind('PRODUCER');
              break;

            case 'ConsumerStart':
              span.delegate.setKind('CONSUMER');
              break;

            case 'ConsumerStop':
              span.finish();
              span.delegate.setKind('CONSUMER');
              break;

            case 'MessageAddr':
              span.delegate.setRemoteEndpoint(new Endpoint$2({
                serviceName: rec.annotation.serviceName,
                ipv4: rec.annotation.host && rec.annotation.host.ipv4(),
                port: rec.annotation.port
              }));
              break;

            case 'LocalOperationStart':
              span.delegate.setName(rec.annotation.name);
              break;

            case 'LocalOperationStop':
              span.finish();
              break;

            case 'Message':
              span.delegate.addAnnotation(rec.timestamp, rec.annotation.message);
              break;

            case 'Rpc':
              span.delegate.setName(rec.annotation.name);
              break;

            case 'ServiceName':
              span.localEndpoint.setServiceName(rec.annotation.serviceName);
              break;

            case 'BinaryAnnotation':
              span.delegate.putTag(rec.annotation.key, rec.annotation.value);
              break;

            case 'LocalAddr':
              span.localEndpoint.setIpv4(rec.annotation.host && rec.annotation.host.ipv4());
              span.localEndpoint.setPort(rec.annotation.port);
              break;

            case 'ServerAddr':
              span.delegate.setKind('CLIENT');
              span.delegate.setRemoteEndpoint(new Endpoint$2({
                serviceName: rec.annotation.serviceName,
                ipv4: rec.annotation.host && rec.annotation.host.ipv4(),
                port: rec.annotation.port
              }));
              break;

            default:
              break;
          }
        });
      }
    }, {
      key: "toString",
      value: function toString() {
        return 'BatchRecorder()';
      }
    }]);

    return BatchRecorder;
  }();

  var batchRecorder = BatchRecorder;

  var ConsoleRecorder =
  /*#__PURE__*/
  function () {
    /* eslint-disable no-console */
    function ConsoleRecorder() {
      var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : console.log;

      _classCallCheck(this, ConsoleRecorder);

      this.logger = logger;
    }

    _createClass(ConsoleRecorder, [{
      key: "record",
      value: function record(rec) {
        var id = rec.traceId;
        this.logger("Record at (spanId=".concat(id.spanId, ", parentId=").concat(id.parentId, ",") + " traceId=".concat(id.traceId, "): ").concat(rec.annotation.toString()));
      }
    }, {
      key: "toString",
      value: function toString() {
        return 'consoleTracer';
      }
    }]);

    return ConsoleRecorder;
  }();

  var consoleRecorder = ConsoleRecorder;

  /*! https://mths.be/punycode v1.4.1 by @mathias */

  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */

  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80

  var delimiter = '-'; // '\x2D'
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars

  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */

  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };
  /** Convenience shortcuts */

  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */

  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */

  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }

  // shim for using process in browser

  if (typeof global.setTimeout === 'function') ;

  if (typeof global.clearTimeout === 'function') ;

  var performance = global.performance || {};

  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
    return new Date().getTime();
  }; // generate timestamp or delta

  // Copyright Joyent, Inc. and other Node contributors.
  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  function isString(arg) {
    return typeof arg === 'string';
  }
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var isArray$1 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';

    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map$1(objectKeys(obj), function (k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

        if (isArray$1(obj[k])) {
          return map$1(obj[k], function (v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);
    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
  }

  function map$1(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];

    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }

    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }

    return res;
  };

  function parse(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;

    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr,
          vstr,
          k,
          v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$1(obj, k)) {
        obj[k] = v;
      } else if (isArray$1(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  var url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  };
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  } // Reference: RFC 3986, RFC 1808, RFC 2396
  // define these here so at least they only have to be
  // compiled once on the first module load.

  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,
      // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
      // RFC 2396: characters reserved for delimiting URLs.
  // We actually just auto-escape these.
  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
      // RFC 2396: characters not allowed for various reasons.
  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
  // Note that any invalid chars are also handled, but these
  // are the ones that are *expected* to be seen, so we fast-path
  // them.
  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
  unsafeProtocol = {
    'javascript': true,
    'javascript:': true
  },
      // protocols that never have a hostname.
  hostlessProtocol = {
    'javascript': true,
    'javascript:': true
  },
      // protocols that always contain a // bit.
  slashedProtocol = {
    'http': true,
    'https': true,
    'ftp': true,
    'gopher': true,
    'file': true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }

  Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
    return parse$1(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$1(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    } // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916


    var queryIndex = url.indexOf('?'),
        splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);
    var rest = url; // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"

    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);

      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];

        if (simplePath[2]) {
          self.search = simplePath[2];

          if (parseQueryString) {
            self.query = parse(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }

        return self;
      }
    }

    var proto = protocolPattern.exec(rest);

    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    } // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.


    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';

      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }

    var i, hec, l, p;

    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c
      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.
      // find the first instance of any hostEndingChars
      var hostEnd = -1;

      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
      } // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.


      var auth, atSign;

      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      } // Now we have a portion which is definitely the auth.
      // Pull that off.


      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      } // the host is the remaining to the left of the first non-host char


      hostEnd = -1;

      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
      } // if we still have not hit it, then the entire thing is a host.


      if (hostEnd === -1) hostEnd = rest.length;
      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd); // pull out port.

      parseHost(self); // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.

      self.hostname = self.hostname || ''; // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.

      var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']'; // validate a little.

      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);

        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;

          if (!part.match(hostnamePartPattern)) {
            var newpart = '';

            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            } // we test again with ASCII char only


            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);

              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }

              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }

              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host; // strip [ and ] from the hostname
      // the host field still retains them, though

      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);

        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    } // now rest is set to the post-host stuff.
    // chop off any delim chars.


    if (!unsafeProtocol[lowerProto]) {
      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);

        if (esc === ae) {
          esc = escape(ae);
        }

        rest = rest.split(ae).join(esc);
      }
    } // chop off from the tail first.


    var hash = rest.indexOf('#');

    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }

    var qm = rest.indexOf('?');

    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);

      if (parseQueryString) {
        self.query = parse(self.query);
      }

      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }

    if (rest) self.pathname = rest;

    if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {
      self.pathname = '/';
    } //to support http.request


    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    } // finally, reconstruct the href based on what has been validated.


    self.href = format$1(self);
    return self;
  } // format a parsed object into a url string


  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) obj = parse$1({}, obj);
    return format$1(obj);
  }

  function format$1(self) {
    var auth = self.auth || '';

    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
        pathname = self.pathname || '',
        hash = self.hash || '',
        host = false,
        query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');

      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query && isObject(self.query) && Object.keys(self.query).length) {
      query = stringify(self.query);
    }

    var search = self.search || query && '?' + query || '';
    if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.

    if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;
    pathname = pathname.replace(/[?#]/g, function (match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');
    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function () {
    return format$1(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function (relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function (relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);

    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    } // hash is always overridden, no matter what.
    // even href="" will remove it.


    result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

    if (relative.href === '') {
      result.href = result.format();
      return result;
    } // hrefs like //foo/bar always cut to the protocol.


    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);

      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol') result[rkey] = relative[rkey];
      } //urlParse appends trailing / to urls like http://www.example.com


      if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }

    var relPath;

    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);

        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }

        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;

      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');

        while (relPath.length && !(relative.host = relPath.shift()));

        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }

      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port; // to support http.request

      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }

      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
        isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
        mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || []; // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.

    if (psychotic) {
      result.hostname = '';
      result.port = null;

      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
      }

      result.host = '';

      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;

        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
        }

        relative.host = null;
      }

      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }

    var authInHost;

    if (isRelAbs) {
      // it's absolute.
      result.host = relative.host || relative.host === '' ? relative.host : result.host;
      result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath; // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

        authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      result.search = relative.search;
      result.query = relative.query; //to support http.request

      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }

      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null; //to support http.request

      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }

      result.href = result.format();
      return result;
    } // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.


    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0

    var up = 0;

    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];

      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    } // if the path is allowed to go above the root, restore leading ..s


    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || result.host && srcPath.length;

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    } //to support request.http


    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function () {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);

    if (port) {
      port = port[0];

      if (port !== ':') {
        self.port = port.substr(1);
      }

      host = host.substr(0, host.length - port.length);
    }

    if (host) self.hostname = host;
  }

  function parseRequestUrl(requestUrl) {
    var parsed = url.parse(requestUrl);
    return {
      host: parsed.hostname,
      path: parsed.pathname
    };
  }

  var parseUrl = parseRequestUrl;

  var Some$4 = option.Some,
      None$3 = option.None;

  function stringToBoolean(str) {
    return str === '1' || str === 'true';
  }

  function stringToIntOption(str) {
    try {
      return new Some$4(parseInt(str));
    } catch (err) {
      return None$3;
    }
  }

  function containsRequiredHeaders(readHeader) {
    return readHeader(httpHeaders.TraceId) !== None$3 && readHeader(httpHeaders.SpanId) !== None$3;
  }

  function requiredArg$1(name) {
    throw new Error("HttpServerInstrumentation: Missing required argument ".concat(name, "."));
  }

  var HttpServerInstrumentation =
  /*#__PURE__*/
  function () {
    function HttpServerInstrumentation(_ref) {
      var _ref$tracer = _ref.tracer,
          tracer = _ref$tracer === void 0 ? requiredArg$1('tracer') : _ref$tracer,
          _ref$serviceName = _ref.serviceName,
          serviceName = _ref$serviceName === void 0 ? tracer.localEndpoint.serviceName : _ref$serviceName,
          host = _ref.host,
          _ref$port = _ref.port,
          port = _ref$port === void 0 ? requiredArg$1('port') : _ref$port;

      _classCallCheck(this, HttpServerInstrumentation);

      this.tracer = tracer;
      this.serviceName = serviceName;
      this.host = host && new InetAddress_1(host);
      this.port = port;
    }

    _createClass(HttpServerInstrumentation, [{
      key: "_createIdFromHeaders",
      value: function _createIdFromHeaders(readHeader) {
        var _this = this;

        if (containsRequiredHeaders(readHeader)) {
          var spanId = readHeader(httpHeaders.SpanId);
          var parentId = spanId.map(function (sid) {
            var traceId = readHeader(httpHeaders.TraceId);
            var parentSpanId = readHeader(httpHeaders.ParentSpanId);
            var sampled = readHeader(httpHeaders.Sampled);
            var flags = readHeader(httpHeaders.Flags).flatMap(stringToIntOption).getOrElse(0);
            return new TraceId_1({
              traceId: traceId,
              parentId: parentSpanId,
              spanId: sid,
              sampled: sampled.map(stringToBoolean),
              flags: flags
            });
          });
          return !this.tracer.supportsJoin ? parentId.map(function (id) {
            return _this.tracer.letId(id, function () {
              return _this.tracer.createChildId();
            });
          }) : parentId;
        } else {
          if (readHeader(httpHeaders.Flags) !== None$3 || readHeader(httpHeaders.Sampled) !== None$3) {
            var sampled = readHeader(httpHeaders.Sampled) === None$3 ? None$3 : readHeader(httpHeaders.Sampled).map(stringToBoolean);
            var flags = readHeader(httpHeaders.Flags).flatMap(stringToIntOption).getOrElse(0);
            return new Some$4(this.tracer.createRootId(sampled, flags === 1));
          } else {
            return new Some$4(this.tracer.createRootId());
          }
        }
      }
    }, {
      key: "recordRequest",
      value: function recordRequest(method, requestUrl, readHeader) {
        var _this2 = this;

        this._createIdFromHeaders(readHeader).ifPresent(function (id) {
          return _this2.tracer.setId(id);
        });

        var id = this.tracer.id;

        var _parseRequestUrl = parseUrl(requestUrl),
            path = _parseRequestUrl.path;

        this.tracer.recordServiceName(this.serviceName);
        this.tracer.recordRpc(method.toUpperCase());
        this.tracer.recordBinary('http.path', path);
        this.tracer.recordAnnotation(new annotation_1.ServerRecv());
        this.tracer.recordAnnotation(new annotation_1.LocalAddr({
          host: this.host,
          port: this.port
        }));
        return id;
      }
    }, {
      key: "recordResponse",
      value: function recordResponse(id, statusCode, error) {
        this.tracer.setId(id);
        this.tracer.recordBinary('http.status_code', statusCode.toString());

        if (error) {
          this.tracer.recordBinary('error', error.toString());
        } else if (statusCode < 200 || statusCode > 399) {
          this.tracer.recordBinary('error', statusCode.toString());
        }

        this.tracer.recordAnnotation(new annotation_1.ServerSend());
      }
    }]);

    return HttpServerInstrumentation;
  }();

  var httpServer = HttpServerInstrumentation;

  function appendZipkinHeaders(req, traceId) {
    var headers = req.headers || {};
    headers[httpHeaders.TraceId] = traceId.traceId;
    headers[httpHeaders.SpanId] = traceId.spanId;

    traceId._parentId.ifPresent(function (psid) {
      headers[httpHeaders.ParentSpanId] = psid;
    });

    traceId.sampled.ifPresent(function (sampled) {
      headers[httpHeaders.Sampled] = sampled ? '1' : '0';
    });

    if (traceId.isDebug()) {
      headers[httpHeaders.Flags] = '1';
    }

    return headers;
  }

  function addZipkinHeaders(req, traceId) {
    var headers = appendZipkinHeaders(req, traceId);
    return Object.assign({}, req, {
      headers: headers
    });
  }

  var request = {
    addZipkinHeaders: addZipkinHeaders
  };

  function requiredArg$2(name) {
    throw new Error("HttpClientInstrumentation: Missing required argument ".concat(name, "."));
  }

  var HttpClientInstrumentation =
  /*#__PURE__*/
  function () {
    function HttpClientInstrumentation(_ref) {
      var _ref$tracer = _ref.tracer,
          tracer = _ref$tracer === void 0 ? requiredArg$2('tracer') : _ref$tracer,
          _ref$serviceName = _ref.serviceName,
          serviceName = _ref$serviceName === void 0 ? tracer.localEndpoint.serviceName : _ref$serviceName,
          remoteServiceName = _ref.remoteServiceName;

      _classCallCheck(this, HttpClientInstrumentation);

      this.tracer = tracer;
      this.serviceName = serviceName;
      this.remoteServiceName = remoteServiceName;
    }

    _createClass(HttpClientInstrumentation, [{
      key: "recordRequest",
      value: function recordRequest(request$$1, url, method) {
        this.tracer.setId(this.tracer.createChildId());
        var traceId = this.tracer.id;

        var _parseRequestUrl = parseUrl(url),
            path = _parseRequestUrl.path;

        this.tracer.recordServiceName(this.serviceName);
        this.tracer.recordRpc(method.toUpperCase());
        this.tracer.recordBinary('http.path', path);
        this.tracer.recordAnnotation(new annotation_1.ClientSend());

        if (this.remoteServiceName) {
          // TODO: can we get the host and port of the http connection?
          this.tracer.recordAnnotation(new annotation_1.ServerAddr({
            serviceName: this.remoteServiceName
          }));
        }

        return request.addZipkinHeaders(request$$1, traceId);
      }
    }, {
      key: "recordResponse",
      value: function recordResponse(traceId, statusCode) {
        this.tracer.setId(traceId);
        this.tracer.recordBinary('http.status_code', statusCode.toString());

        if (statusCode < 200 || statusCode > 399) {
          this.tracer.recordBinary('error', statusCode.toString());
        }

        this.tracer.recordAnnotation(new annotation_1.ClientRecv());
      }
    }, {
      key: "recordError",
      value: function recordError(traceId, error) {
        this.tracer.setId(traceId);
        this.tracer.recordBinary('error', error.toString());
        this.tracer.recordAnnotation(new annotation_1.ClientRecv());
      }
    }]);

    return HttpClientInstrumentation;
  }();

  var httpClient = HttpClientInstrumentation;

  var instrumentation = {
    HttpServer: httpServer,
    HttpClient: httpClient
  };

  function toV1Endpoint(endpoint) {
    if (endpoint === undefined) {
      return undefined;
    }

    var res = {
      serviceName: endpoint.serviceName || '' // undefined is not allowed in v1

    };

    if (endpoint.ipv4) {
      res.ipv4 = endpoint.ipv4;
    }

    if (endpoint.port) {
      res.port = endpoint.port;
    }

    return res;
  }

  function toV1Annotation(ann, endpoint) {
    return {
      value: ann.value,
      timestamp: ann.timestamp,
      endpoint: endpoint
    };
  }

  function encodeV1(span) {
    var res = {
      traceId: span.traceId
    };

    if (span.parentId) {
      // instead of writing "parentId": NULL
      res.parentId = span.parentId;
    }

    res.id = span.id;
    res.name = span.name || ''; // undefined is not allowed in v1
    // Log timestamp and duration if this tracer started and completed this span.

    if (!span.shared) {
      res.timestamp = span.timestamp;
      res.duration = span.duration;
    }

    var jsonEndpoint = toV1Endpoint(span.localEndpoint);
    var beginAnnotation;
    var endAnnotation;
    var addressKey;

    switch (span.kind) {
      case 'CLIENT':
        beginAnnotation = span.timestamp ? 'cs' : undefined;
        endAnnotation = 'cr';
        addressKey = 'sa';
        break;

      case 'SERVER':
        beginAnnotation = span.timestamp ? 'sr' : undefined;
        endAnnotation = 'ss';
        addressKey = 'ca';
        break;

      case 'PRODUCER':
        beginAnnotation = span.timestamp ? 'ms' : undefined;
        endAnnotation = 'ws';
        addressKey = 'ma';
        break;

      case 'CONSUMER':
        if (span.timestamp && span.duration) {
          beginAnnotation = 'wr';
          endAnnotation = 'mr';
        } else if (span.timestamp) {
          beginAnnotation = 'mr';
        }

        addressKey = 'ma';
        break;

      default:
    }

    if (span.annotations.length > 0 || beginAnnotation) {
      // don't write empty array
      res.annotations = span.annotations.map(function (ann) {
        return toV1Annotation(ann, jsonEndpoint);
      });
    }

    if (beginAnnotation) {
      res.annotations.push({
        value: beginAnnotation,
        timestamp: span.timestamp,
        endpoint: jsonEndpoint
      });

      if (span.duration) {
        res.annotations.push({
          value: endAnnotation,
          timestamp: span.timestamp + span.duration,
          endpoint: jsonEndpoint
        });
      }
    }

    var keys = Object.keys(span.tags);

    if (keys.length > 0 || span.remoteEndpoint) {
      // don't write empty array
      res.binaryAnnotations = keys.map(function (key) {
        return {
          key: key,
          value: span.tags[key],
          endpoint: jsonEndpoint
        };
      });
    }

    if (span.remoteEndpoint) {
      var address = {
        key: addressKey,
        value: true,
        endpoint: toV1Endpoint(span.remoteEndpoint)
      };
      res.binaryAnnotations.push(address);
    }

    if (span.debug) {
      // instead of writing "debug": false
      res.debug = true;
    }

    return JSON.stringify(res);
  }

  function encodeV2(span) {
    var copy = {
      traceId: span.traceId
    };

    if (span.parentId) {
      copy.parentId = span.parentId;
    }

    copy.id = span.id;

    if (span.name) {
      copy.name = span.name;
    }

    if (span.kind) {
      copy.kind = span.kind;
    }

    if (span.timestamp) {
      copy.timestamp = span.timestamp;
    }

    if (span.duration) {
      copy.duration = span.duration;
    }

    if (span.localEndpoint) {
      copy.localEndpoint = span.localEndpoint;
    }

    if (span.remoteEndpoint) {
      copy.remoteEndpoint = span.remoteEndpoint;
    }

    if (span.annotations.length > 0) {
      copy.annotations = span.annotations;
    }

    if (Object.keys(span.tags).length > 0) {
      copy.tags = span.tags;
    }

    if (span.debug) {
      copy.debug = true;
    }

    if (span.shared) {
      copy.shared = true;
    }

    return JSON.stringify(copy);
  }

  var JSON_V1 = {
    encode: function encode(span) {
      return encodeV1(span);
    }
  };
  var JSON_V2 = {
    encode: function encode(span) {
      return encodeV2(span);
    }
  };
  var jsonEncoder = {
    JSON_V1: JSON_V1,
    JSON_V2: JSON_V2
  };

  module.exports = {
    Tracer: tracer,
    createNoopTracer: noop,
    randomTraceId: randomTraceId_1,
    TraceId: TraceId_1,
    option: option,
    Annotation: annotation_1,
    InetAddress: InetAddress_1,
    HttpHeaders: httpHeaders,
    BatchRecorder: batchRecorder,
    ConsoleRecorder: consoleRecorder,
    ExplicitContext: explicitContext,
    sampler: sampler,
    Request: request,
    Instrumentation: instrumentation,
    model: model,
    jsonEncoder: jsonEncoder,
    parseRequestUrl: parseUrl
  };

})));
