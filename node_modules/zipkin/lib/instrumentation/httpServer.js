"use strict";

var _annotation = _interopRequireDefault(require("../annotation"));

var _option = require("../option");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Header = require('../httpHeaders');

var InetAddress = require('../InetAddress');

var TraceId = require('../tracer/TraceId');

var parseRequestUrl = require('../parseUrl');

function stringToBoolean(str) {
  return str === '1' || str === 'true';
}

function stringToIntOption(str) {
  try {
    return new _option.Some(parseInt(str));
  } catch (err) {
    return _option.None;
  }
}

function containsRequiredHeaders(readHeader) {
  return readHeader(Header.TraceId) !== _option.None && readHeader(Header.SpanId) !== _option.None;
}

function requiredArg(name) {
  throw new Error("HttpServerInstrumentation: Missing required argument ".concat(name, "."));
}

var HttpServerInstrumentation =
/*#__PURE__*/
function () {
  function HttpServerInstrumentation(_ref) {
    var _ref$tracer = _ref.tracer,
        tracer = _ref$tracer === void 0 ? requiredArg('tracer') : _ref$tracer,
        _ref$serviceName = _ref.serviceName,
        serviceName = _ref$serviceName === void 0 ? tracer.localEndpoint.serviceName : _ref$serviceName,
        host = _ref.host,
        _ref$port = _ref.port,
        port = _ref$port === void 0 ? requiredArg('port') : _ref$port,
        _ref$serverTags = _ref.serverTags,
        serverTags = _ref$serverTags === void 0 ? {} : _ref$serverTags;

    _classCallCheck(this, HttpServerInstrumentation);

    this.tracer = tracer;
    this.serviceName = serviceName;
    this.host = host && new InetAddress(host);
    this.port = port;
    this.serverTags = serverTags;
  }

  _createClass(HttpServerInstrumentation, [{
    key: "_createIdFromHeaders",
    value: function _createIdFromHeaders(readHeader) {
      var _this = this;

      if (containsRequiredHeaders(readHeader)) {
        var spanId = readHeader(Header.SpanId);
        var parentId = spanId.map(function (sid) {
          var traceId = readHeader(Header.TraceId);
          var parentSpanId = readHeader(Header.ParentSpanId);
          var sampled = readHeader(Header.Sampled);
          var flags = readHeader(Header.Flags).flatMap(stringToIntOption).getOrElse(0);
          return new TraceId({
            traceId: traceId,
            parentId: parentSpanId,
            spanId: sid,
            sampled: sampled.map(stringToBoolean),
            flags: flags
          });
        });
        return !this.tracer.supportsJoin ? parentId.map(function (id) {
          return _this.tracer.letId(id, function () {
            return _this.tracer.createChildId();
          });
        }) : parentId;
      } else {
        if (readHeader(Header.Flags) !== _option.None || readHeader(Header.Sampled) !== _option.None) {
          var sampled = readHeader(Header.Sampled) === _option.None ? _option.None : readHeader(Header.Sampled).map(stringToBoolean);
          var flags = readHeader(Header.Flags).flatMap(stringToIntOption).getOrElse(0);
          return new _option.Some(this.tracer.createRootId(sampled, flags === 1));
        } else {
          return new _option.Some(this.tracer.createRootId());
        }
      }
    }
  }, {
    key: "recordRequest",
    value: function recordRequest(method, requestUrl, readHeader) {
      var _this2 = this;

      this._createIdFromHeaders(readHeader).ifPresent(function (id) {
        return _this2.tracer.setId(id);
      });

      var id = this.tracer.id;

      var _parseRequestUrl = parseRequestUrl(requestUrl),
          path = _parseRequestUrl.path;

      this.tracer.recordServiceName(this.serviceName);
      this.tracer.recordRpc(method.toUpperCase());
      this.tracer.recordBinary('http.path', path);

      if (this.serverTags) {
        this.tracer.setTags(this.serverTags);
      }

      this.tracer.recordAnnotation(new _annotation.default.ServerRecv());
      this.tracer.recordAnnotation(new _annotation.default.LocalAddr({
        host: this.host,
        port: this.port
      }));
      return id;
    }
  }, {
    key: "recordResponse",
    value: function recordResponse(id, statusCode, error) {
      this.tracer.setId(id);
      this.tracer.recordBinary('http.status_code', statusCode.toString());

      if (error) {
        this.tracer.recordBinary('error', error.toString());
      } else if (statusCode < 200 || statusCode > 399) {
        this.tracer.recordBinary('error', statusCode.toString());
      }

      this.tracer.recordAnnotation(new _annotation.default.ServerSend());
    }
  }]);

  return HttpServerInstrumentation;
}();

module.exports = HttpServerInstrumentation;