"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var InetAddress = require('./InetAddress');

var SimpleAnnotation =
/*#__PURE__*/
function () {
  function SimpleAnnotation() {
    _classCallCheck(this, SimpleAnnotation);
  }

  _createClass(SimpleAnnotation, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.annotationType, "()");
    }
  }]);

  return SimpleAnnotation;
}();

var ClientSend =
/*#__PURE__*/
function (_SimpleAnnotation) {
  _inherits(ClientSend, _SimpleAnnotation);

  function ClientSend() {
    _classCallCheck(this, ClientSend);

    return _possibleConstructorReturn(this, _getPrototypeOf(ClientSend).apply(this, arguments));
  }

  return ClientSend;
}(SimpleAnnotation);

var ClientRecv =
/*#__PURE__*/
function (_SimpleAnnotation2) {
  _inherits(ClientRecv, _SimpleAnnotation2);

  function ClientRecv() {
    _classCallCheck(this, ClientRecv);

    return _possibleConstructorReturn(this, _getPrototypeOf(ClientRecv).apply(this, arguments));
  }

  return ClientRecv;
}(SimpleAnnotation);

var ServerSend =
/*#__PURE__*/
function (_SimpleAnnotation3) {
  _inherits(ServerSend, _SimpleAnnotation3);

  function ServerSend() {
    _classCallCheck(this, ServerSend);

    return _possibleConstructorReturn(this, _getPrototypeOf(ServerSend).apply(this, arguments));
  }

  return ServerSend;
}(SimpleAnnotation);

var ServerRecv =
/*#__PURE__*/
function (_SimpleAnnotation4) {
  _inherits(ServerRecv, _SimpleAnnotation4);

  function ServerRecv() {
    _classCallCheck(this, ServerRecv);

    return _possibleConstructorReturn(this, _getPrototypeOf(ServerRecv).apply(this, arguments));
  }

  return ServerRecv;
}(SimpleAnnotation);

var ProducerStart =
/*#__PURE__*/
function (_SimpleAnnotation5) {
  _inherits(ProducerStart, _SimpleAnnotation5);

  function ProducerStart() {
    _classCallCheck(this, ProducerStart);

    return _possibleConstructorReturn(this, _getPrototypeOf(ProducerStart).apply(this, arguments));
  }

  return ProducerStart;
}(SimpleAnnotation);

var ProducerStop =
/*#__PURE__*/
function (_SimpleAnnotation6) {
  _inherits(ProducerStop, _SimpleAnnotation6);

  function ProducerStop() {
    _classCallCheck(this, ProducerStop);

    return _possibleConstructorReturn(this, _getPrototypeOf(ProducerStop).apply(this, arguments));
  }

  return ProducerStop;
}(SimpleAnnotation);

var ConsumerStart =
/*#__PURE__*/
function (_SimpleAnnotation7) {
  _inherits(ConsumerStart, _SimpleAnnotation7);

  function ConsumerStart() {
    _classCallCheck(this, ConsumerStart);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConsumerStart).apply(this, arguments));
  }

  return ConsumerStart;
}(SimpleAnnotation);

var ConsumerStop =
/*#__PURE__*/
function (_SimpleAnnotation8) {
  _inherits(ConsumerStop, _SimpleAnnotation8);

  function ConsumerStop() {
    _classCallCheck(this, ConsumerStop);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConsumerStop).apply(this, arguments));
  }

  return ConsumerStop;
}(SimpleAnnotation);

function LocalOperationStart(name) {
  this.name = name;
}

LocalOperationStart.prototype.toString = function () {
  return "LocalOperationStart(\"".concat(this.name, "\")");
};

var LocalOperationStop =
/*#__PURE__*/
function (_SimpleAnnotation9) {
  _inherits(LocalOperationStop, _SimpleAnnotation9);

  function LocalOperationStop() {
    _classCallCheck(this, LocalOperationStop);

    return _possibleConstructorReturn(this, _getPrototypeOf(LocalOperationStop).apply(this, arguments));
  }

  return LocalOperationStop;
}(SimpleAnnotation);

function Message(message) {
  this.message = message;
}

Message.prototype.toString = function () {
  return "Message(\"".concat(this.message, "\")");
};

function ServiceName(serviceName) {
  this.serviceName = serviceName;
}

ServiceName.prototype.toString = function () {
  return "ServiceName(\"".concat(this.serviceName, "\")");
};

function Rpc(name) {
  this.name = name;
}

Rpc.prototype.toString = function () {
  return "Rpc(\"".concat(this.name, "\")");
};

function ClientAddr(_ref) {
  var host = _ref.host,
      port = _ref.port;
  this.host = host;
  this.port = port;
}

ClientAddr.prototype.toString = function () {
  return "ClientAddr(host=\"".concat(this.host, "\", port=").concat(this.port, ")");
};

function ServerAddr(_ref2) {
  var serviceName = _ref2.serviceName,
      host = _ref2.host,
      port = _ref2.port;
  this.serviceName = serviceName;
  this.host = host || undefined;
  this.port = port || 0;
}

ServerAddr.prototype.toString = function () {
  return "ServerAddr(serviceName=\"".concat(this.serviceName, "\", host=\"").concat(this.host, "\", port=").concat(this.port, ")");
};

function LocalAddr(_ref3) {
  var host = _ref3.host,
      port = _ref3.port;
  this.host = host || InetAddress.getLocalAddress();
  this.port = port || 0;
}

LocalAddr.prototype.toString = function () {
  return "LocalAddr(host=\"".concat(this.host.toString(), "\", port=").concat(this.port, ")");
};

function MessageAddr(_ref4) {
  var serviceName = _ref4.serviceName,
      host = _ref4.host,
      port = _ref4.port;
  this.serviceName = serviceName;
  this.host = host;
  this.port = port;
}

MessageAddr.prototype.toString = function () {
  return "MessageAddr(serviceName=\"".concat(this.serviceName, "\", host=\"").concat(this.host, "\", port=").concat(this.port, ")");
};

function BinaryAnnotation(key, value) {
  this.key = key;
  this.value = value;
}

BinaryAnnotation.prototype.toString = function () {
  return "BinaryAnnotation(".concat(this.key, "=\"").concat(this.value, "\")");
};

new ServiceName('teste');
var annotation = {
  ClientSend: ClientSend,
  ClientRecv: ClientRecv,
  ServerSend: ServerSend,
  ServerRecv: ServerRecv,
  ProducerStart: ProducerStart,
  ProducerStop: ProducerStop,
  ConsumerStart: ConsumerStart,
  ConsumerStop: ConsumerStop,
  MessageAddr: MessageAddr,
  Message: Message,
  ServiceName: ServiceName,
  Rpc: Rpc,
  ClientAddr: ClientAddr,
  ServerAddr: ServerAddr,
  LocalAddr: LocalAddr,
  BinaryAnnotation: BinaryAnnotation,
  LocalOperationStart: LocalOperationStart,
  LocalOperationStop: LocalOperationStop
};
Object.keys(annotation).forEach(function (key) {
  annotation[key].prototype.annotationType = key;
});
var _default = annotation;
exports.default = _default;